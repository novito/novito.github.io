<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming and random thoughts]]></title>
  <link href="http://novito.github.io/atom.xml" rel="self"/>
  <link href="http://novito.github.io/"/>
  <updated>2015-06-25T19:37:00-07:00</updated>
  <id>http://novito.github.io/</id>
  <author>
    <name><![CDATA[Joan Roig]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't Mutate Your Arguments]]></title>
    <link href="http://novito.github.io/blog/2015/06/25/dont-mutate-your-arguments/"/>
    <updated>2015-06-25T18:51:26-07:00</updated>
    <id>http://novito.github.io/blog/2015/06/25/dont-mutate-your-arguments</id>
    <content type="html"><![CDATA[<p>The other day at work I run into a bug that I thought it would be worth documenting. The root of the bug was <strong>modifying</strong> one of the <strong>arguments</strong> in a method. I have always read how bad is to mutate the arguments, but I would say that this is the first time that this problem hits me in a painful and hard to find way.</p>

<p>Some context: I had some data stored in Memcache and I wanted to: access it, decorate it (e.g. convert plain numbers into money formatted numbers) and present it to the caller. The plan was simple:</p>

<ol>
<li>Create a <code>DataCacheManager</code> that will be responsible to read and write from the cache.</li>
<li>Create a <code>DataPresenter</code> that will be given a Hash that has been fetched from the cache, and decorate some of the entries and leave the rest how they are.</li>
</ol>


<p>Here is what I was doing (simplified):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DataCacheManager</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fetch</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DataPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">present</span>
</span><span class='line'>    <span class="n">data</span><span class="o">[</span><span class="ss">:profit</span><span class="o">]</span> <span class="o">=</span> <span class="n">decorate_profit</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">decorate_profit</span>
</span><span class='line'>    <span class="s1">&#39;$&#39;</span> <span class="o">+</span> <span class="n">data</span><span class="o">[</span><span class="ss">:profit</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StatisticsInteractor</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>    <span class="c1"># Fetch data</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="no">DataCacheManager</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">.</span><span class="n">fetch</span> <span class="c1"># This would return a hash that looked like this: {units: 3, profit: 4}</span>
</span><span class='line'>    <span class="no">DataPresenter</span><span class="o">.</span><span class="n">present</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Problem</strong></p>

<p>Can you spot the problem here? Well, the main problem is in DataPresenter#present we are overwritting data. Somebody has trusted us giving a reference to an object, and we are overwritting the data contained within that object. So, the first time that I fetched the cache, I would received a plain number (e.g. 8), but the second time I would get a decorated number (e.g $8).</p>

<p>What I shown is a simplified version, but let me tell you that at the moment that I saw some dollars in the cache, I was pretty confused on what was going on. It took me a while to realize that the problem was that I was <strong>mutating</strong> that <code>data</code>.</p>

<p><strong>Solution</strong></p>

<p>Instead of overwritting <code>data</code>, I duplicated it in the initializer of the <code>Decorator</code> class. I wanted to be able to just decorate some of the keys that were being given to me, and not touch the other ones, but at the same time I didn&rsquo;t want to mutate whatever object was given. So here is how it ended up looking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was definitely a good learning experience. If we want to use any object that is given to us, <strong>DO NOT</strong> mutate it. The caller should trust that we are good people and ar enot going to mess with the data that they have given to us.</p>
]]></content>
  </entry>
  
</feed>
